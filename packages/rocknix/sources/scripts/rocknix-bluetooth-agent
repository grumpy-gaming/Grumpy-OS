#!/usr/bin/python

from __future__ import absolute_import, print_function

from optparse import OptionParser, make_option
import dbus
import dbus.service
import dbus.mainloop.glib
import bluezutils
import time
import os
import logging
import signal
from gi.repository import GLib

# Constants and global variables
AGENT_INTERFACE = 'org.bluez.Agent1'
CONTROL_FILE = "/run/bt_discovery_control"
AGENT_STATUS_FILE = "/run/bt_agent_status"
LOG_FILE = "/var/log/bluetooth-agent.log"

gadapter = None
gdiscovering = False
gdevices = {}
glisting_mode = False
glisting_devs = {}

# Configure logging
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def bool2str(val, valiftrue, valiffalse):
    return valiftrue if val else valiffalse

def logging_status(msg):
    try:
        with open("/run/bt_status", "w") as file:
            file.write(msg + "\n")
    except Exception as e:
        logging.error(f"Failed to write status: {e}")

def prop2str(p):
    newp = p
    if isinstance(newp, dbus.String):
        newp = newp.encode('ascii', 'replace')
    if isinstance(newp, bytes):
        newp = newp.decode('UTF-8')
    return newp

def getDevName(properties):
    if "Name" in properties and "Address" in properties and "Icon" in properties:
        return f"{prop2str(properties['Name'])} ({prop2str(properties['Address'])}, {prop2str(properties['Icon'])})"
    if "Name" in properties and "Address" in properties:
        return f"{prop2str(properties['Name'])} ({prop2str(properties['Address'])})"
    if "Name" in properties:
        return prop2str(properties["Name"])
    if "Address" in properties:
        return prop2str(properties["Address"])
    return "unknown"

def getShortDevName(properties):
    if "Name" in properties:
        return prop2str(properties["Name"])
    if "Address" in properties:
        return prop2str(properties["Address"])
    return "unknown"

def propertiesToStr(properties):
    result = ""
    for p in properties:
        if p not in ["ServiceData", "RSSI", "UUIDs", "Adapter", "AddressType", "Alias", "Bonded", "ServicesResolved"]:
            if result != "":
                result = result + ", "
            result = result + "{}={}".format(p, properties[p])
    return result

def getDevAddressNameType(properties):
    if "Address" not in properties:
        return None, None, None

    vaddr = prop2str(properties["Address"])
    vname = prop2str(properties["Name"]) if "Name" in properties else None
    vtype = prop2str(properties["Icon"]) if "Icon" in properties else None

    return vaddr, vname, vtype

def listing_dev_event(path, properties, adding):
    global glisting_devs

    if (path in glisting_devs and adding) or (path not in glisting_devs and not adding):
        return

    if adding:
        glisting_devs[path] = True
    else:
        del glisting_devs[path]

    try:
        devaddress, devname, devtype = getDevAddressNameType(properties)

        # Skip writing to file if the device address is None
        if devaddress is None:
            logging.debug(f"Skipping device with None address at path: {path}")
            return

        with open("/run/bt_listing", "a") as file:
            file.write(f'<device id="{devaddress}" name="{devname}" '
                      f'status="{"added" if adding else "removed"}" '
                      f'type="{icon2basicname(devtype)}" />\n')
    except Exception as e:
        logging.error(f"Failed to write listing event: {e}")

def icon2basicname(icon):
    if icon is None:
        return "unknown"
    if icon == "input-gaming":
        return "joystick"
    if icon.startswith("audio-"):
        return "audio"
    return icon

# Define the DBus signal handlers
def interfaces_added(path, interfaces):
    global gdevices
    global glisting_mode

    if "org.bluez.Device1" not in interfaces:
        return
    if not interfaces["org.bluez.Device1"]:
        return

    properties = interfaces["org.bluez.Device1"]

    if path in gdevices:
        gdevices[path] = merge2dicts(gdevices[path], properties)
    else:
        gdevices[path] = properties

    logging.info("Interface added: {}".format(propertiesToStr(properties)))

    if glisting_mode:
        listing_dev_event(path, gdevices[path], True)

    if "Address" in gdevices[path]:
        connect_device(path, prop2str(properties["Address"]), gdevices[path], False, getBluetoothWantedAddr())
    else:
        logging.info("No address. skip.")

def interfaces_removed(path, interfaces):
    global gdevices

    if path in gdevices:
        listing_dev_event(path, gdevices[path], False)
        del gdevices[path]

def properties_changed(interface, changed, invalidated, path):
    global gdevices
    global glisting_mode

    if interface != "org.bluez.Device1":
        return

    if path in gdevices:
        gdevices[path] = merge2dicts(gdevices[path], changed)
    else:
        gdevices[path] = changed

    if glisting_mode:
        listing_dev_event(path, gdevices[path], True)

    propstr = propertiesToStr(changed)
    if propstr != "":
        logging.info("Properties changed: {}".format(propstr))

    if "Paired" in changed and changed["Paired"] == True:
        connect_device(path, gdevices[path]["Address"], gdevices[path], True, getBluetoothWantedAddr())
        return

    if "Connected" in changed:
        if changed["Connected"] == True:
            return
        if changed["Connected"] == False:
            logging.info("Skipping (property Connected changed to False)")
            return

    if "Address" in gdevices[path]:
        connect_device(path, gdevices[path]["Address"], gdevices[path], False, getBluetoothWantedAddr())

def merge2dicts(d1, d2):
    res = d1.copy()
    res.update(d2)
    return res

def getBluetoothWantedAddr():
    addrDevice = None
    if os.path.isfile("/run/bt_device"):
        with open("/run/bt_device", "r") as file:
            addrDevice = file.read().strip()
            if addrDevice == "":
                addrDevice = None
            logging.info("bt_dev: {}".format(addrDevice))
    return addrDevice

def connect_device(path, address, properties, forceConnect, filter):
    global gdiscovering
    global gadapter

    if not filter:
        logging.info(f"skipping {address}. No filter.")
        return

    if "Trusted" not in properties or "Connected" not in properties:
        logging.info(f"skipping {address}. Missing required properties.")
        return

    trusted = prop2str(properties["Trusted"])
    paired = prop2str(properties["Paired"])
    devName = getDevName(properties)
    shortDevName = getShortDevName(properties)
    connected = prop2str(properties["Connected"])

    if "Icon" not in properties:
        logging.info(f"Skipping device {devName} (no type)")
        return

    if not (filter == prop2str(properties["Address"]) or 
            (filter == "input" and prop2str(properties["Icon"]).startswith("input"))):
        logging.info(f"Skipping device {devName} (not {filter})")
        return

    logging.info(f"Event for {devName} (paired={bool2str(paired, 'paired', 'not paired')}, "
                f"trusted={bool2str(trusted, 'trusted', 'untrusted')}, "
                f"connected={bool2str(connected, 'connected', 'disconnected')})")

    if paired and trusted and connected:
        logging.info(f"Skipping already connected device {devName}")
        return

    if not paired and not connected and gdiscovering:
        doPairing(address, devName, shortDevName)

    if not trusted and (gdiscovering or forceConnect):
        doTrusting(path, devName, shortDevName)

    if not connected or forceConnect:
        doConnect(address, devName, shortDevName)

def check_discovery_control():
    try:
        if os.path.exists(CONTROL_FILE):
            with open(CONTROL_FILE, "r") as f:
                command = f.read().strip()
            
            try:
                os.remove(CONTROL_FILE)
            except Exception as e:
                logging.error(f"Failed to remove control file: {e}")
            
            if command == "start":
                handle_start_discovery()
            elif command == "stop":
                handle_stop_discovery()
    except Exception as e:
        logging.error(f"Error in check_discovery_control: {e}")
    return True

def handle_start_discovery():
    global gdiscovering, gadapter, glisting_mode, glisting_devs, gdevices
    
    if os.path.isfile("/run/bt_listing"):
        glisting_mode = True
        logging.info("Listing mode enabled")
        glisting_devs = {}
        for path in gdevices:
            listing_dev_event(path, gdevices[path], True)

    try:
        if not gdiscovering:
            gdiscovering = True
            logging.info("Starting discovery")
            gadapter.StartDiscovery()
    except Exception as e:
        logging.error(f"Failed to start discovery: {e}")

def handle_stop_discovery():
    global gdiscovering, gadapter, glisting_mode
    
    if glisting_mode:
        logging.info("Listing mode disabled")
    glisting_mode = False

    try:
        if gdiscovering:
            gdiscovering = False
            logging.info("Stopping discovery")
            gadapter.StopDiscovery()
    except Exception as e:
        logging.error(f"Failed to stop discovery: {e}")

def doPairing(address, devName, shortDevName):
    logging.info(f"Pairing... ({devName})")
    logging_status(f"Pairing {shortDevName}...")
    try:
        device = bluezutils.find_device(address)
        device.Pair()
    except Exception as e:
        logging.error(f"Pairing failed ({devName}): {e}")
        logging_status(f"Pairing failed ({shortDevName})")

def doTrusting(path, devName, shortDevName):
    logging.info(f"Trusting ({devName})")
    logging_status(f"Trusting {shortDevName}...")
    try:
        props = dbus.Interface(bus.get_object("org.bluez", path),
                             "org.freedesktop.DBus.Properties")
        props.Set("org.bluez.Device1", "Trusted", True)
    except Exception as e:
        logging.error(f"Trusting failed ({devName}): {e}")
        logging_status(f"Trusting failed ({shortDevName})")

def doConnect(address, devName, shortDevName):
    global gadapter, gdiscovering
    
    try:
        if gdiscovering:
            logging.info("Stopping discovery for connection")
            gadapter.StopDiscovery()

        device = bluezutils.find_device(address)
        for attempt in range(5):
            try:
                logging.info(f"Connecting... ({devName}) attempt {attempt + 1}")
                logging_status(f"Connecting {shortDevName}...")
                device.Connect()
                logging.info(f"Connected successfully ({devName})")
                logging_status(f"Connected successfully ({shortDevName})")
                break
            except Exception as e:
                logging.error(f"Connection attempt {attempt + 1} failed: {e}")
                if attempt < 4:
                    time.sleep(1)
                else:
                    logging_status(f"Connection failed. Giving up. ({shortDevName})")
    finally:
        if gdiscovering:
            logging.info("Restarting discovery")
            try:
                gadapter.StartDiscovery()
            except Exception as e:
                logging.error(f"Failed to restart discovery: {e}")

class Agent(dbus.service.Object):
    exit_on_release = True

    def set_exit_on_release(self, exit_on_release):
        self.exit_on_release = exit_on_release

    @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
    def Release(self):
        logging.info("Agent Release")
        if self.exit_on_release:
            mainloop.quit()

    @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
    def AuthorizeService(self, device, uuid):
        logging.info("Agent AuthorizeService")
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="s")
    def RequestPinCode(self, device):
        logging.info(f"RequestPinCode ({device})")
        return "0000"

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="u")
    def RequestPasskey(self, device):
        logging.info(f"RequestPasskey ({device})")
        return 0

    @dbus.service.method(AGENT_INTERFACE, in_signature="ouq", out_signature="")
    def DisplayPasskey(self, device, passkey, entered):
        logging.info(f"DisplayPasskey ({device}, {passkey:06d} entered {entered})")

    @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
    def DisplayPinCode(self, device, pincode):
        logging.info(f"DisplayPinCode ({device}, {pincode})")

    @dbus.service.method(AGENT_INTERFACE, in_signature="ou", out_signature="")
    def RequestConfirmation(self, device, passkey):
        logging.info("Agent RequestConfirmation")
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="")
    def RequestAuthorization(self, device):
        logging.info("Agent RequestAuthorization")
        return

    @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
    def Cancel(self):
        logging.info("Agent Cancel")

def cleanup():
    try:
        if os.path.exists(AGENT_STATUS_FILE):
            os.remove(AGENT_STATUS_FILE)
    except Exception as e:
        logging.error(f"Cleanup failed: {e}")

def write_status():
    try:
        with open(AGENT_STATUS_FILE, "w") as f:
            f.write(str(os.getpid()))
    except Exception as e:
        logging.error(f"Failed to write status file: {e}")
        return False
    return True

if __name__ == '__main__':
    try:
        # Register cleanup on exit
        import atexit
        atexit.register(cleanup)

        # Parse options
        option_list = [
            make_option("-i", "--device", action="store", type="string", dest="dev_id")
        ]
        parser = OptionParser(option_list=option_list)
        options, args = parser.parse_args()

        # Initialize D-Bus
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        bus = dbus.SystemBus()

        # Register D-Bus signal handlers
        bus.add_signal_receiver(
            interfaces_added,
            dbus_interface="org.freedesktop.DBus.ObjectManager",
            signal_name="InterfacesAdded"
        )
        bus.add_signal_receiver(
            interfaces_removed,
            dbus_interface="org.freedesktop.DBus.ObjectManager",
            signal_name="InterfacesRemoved"
        )
        bus.add_signal_receiver(
            properties_changed,
            dbus_interface="org.freedesktop.DBus.Properties",
            signal_name="PropertiesChanged",
            arg0="org.bluez.Device1",
            path_keyword="path"
        )

        # Register the agent
        agentpath = "/rocknix/agent"
        obj = bus.get_object("org.bluez", "/org/bluez")
        manager = dbus.Interface(obj, "org.bluez.AgentManager1")
        manager.RegisterAgent(agentpath, "NoInputNoOutput")
        manager.RequestDefaultAgent(agentpath)
        agent = Agent(bus, agentpath)
        logging.info("Agent registered")

        # Write status file
        if not write_status():
            raise Exception("Failed to write status file")

        # Initialize adapter
        time.sleep(5)  # Wait for bluetooth hardware
        try:
            adapter = bluezutils.find_adapter(options.dev_id)
        except:
            adapter = bluezutils.find_adapter(None)

        if not adapter:
            raise Exception("No bluetooth adapter found")

        gadapter = adapter
        logging.info("Adapter initialized")

        # Set up discovery control check
        GLib.timeout_add(500, check_discovery_control)

        # Start main loop
        mainloop = GLib.MainLoop()
        mainloop.run()

    except Exception as e:
        logging.error(f"Fatal error: {e}", exc_info=True)
        cleanup()
        raise

    finally:
        logging.error("Agent terminated")
        cleanup()
