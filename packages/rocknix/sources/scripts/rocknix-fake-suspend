#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2025-present ROCKNIX (https://github.com/ROCKNIX)

. /etc/profile

### Enable logging
case $(get_setting system.loglevel) in
verbose)
  DEBUG=true
  ;;
*)
  DEBUG=false
  ;;
esac

SUSPEND_MODE="$(get_setting system.suspendmode)"

# Only do something when suspend mode is off
if [[ "${SUSPEND_MODE}" != "off" ]]; then
  ${DEBUG} && log $0 "Suspend enabled, exiting"
  exit 0
fi

# Only do something when HDMI is disconnected
HDMI_STATUS=$(cat /sys/class/drm/card*/card*-HDMI-A-[0-9]/status)

if [[ "${HDMI_STATUS}" = "connected" ]]; then
  ${DEBUG} && log $0 "HDMI connected, exiting"
  exit 0
fi

# Only do something when charger is disconnected
CHARGE_STATUS=$(cat /sys/class/power_supply/battery/status)

if [[ "${CHARGE_STATUS}" = "Charging" ]]; then
  ${DEBUG} && log $0 "Charger connected, exiting"
  exit 0
fi

# If a game is not running, by default shutdown immediately
SHUTDOWN_DELAY="$(get_setting system.shutdown_delay)"
if [[ "${SHUTDOWN_DELAY}" = "" ]]; then
    SHUTDOWN_DELAY=0
fi

# If a game is running, by default delay the shutdown for 5 minutes
SHUTDOWN_DELAY_RUNNING_GAME="$(get_setting system.shutdown_delay_running_game)"
if [[ "${SHUTDOWN_DELAY_RUNNING_GAME}" = "" ]]; then
    SHUTDOWN_DELAY_RUNNING_GAME=900
fi

# flag files
PID=$$
DELAY_FLAG_FILE_PATTERN="/var/run/shutdown-delay.flag"
DELAY_FLAG_FILE="${DELAY_FLAG_FILE_PATTERN}.${PID}"
POWER_SUSPEND_ACTIVE_FLAG_FILE="/var/run/power-fake-suspend-active.flag"
LID_CLOSED_FLAG_FILE="/var/run/lid-closed.flag"

# Process to kill
TO_KILL="rocknix-fake-suspend"

# Lid / power button - event input device whitelist
INPUT_WHITELIST=(
  # H700
  "axp20x-pek" \
  "gpio-keys-lid" \
  # S922X
  "rk805 pwrkey"
)

# Source = power / lid
SOURCE=$1

# Action = open / close
ACTION=$2

check_es_running_game() {
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:1234/runningGame")
  ${DEBUG} && log $0 "ES runningGame HTTP_STATUS - ${HTTP_STATUS}"
  test $? != 0 && return 1 # call failed, assume no game running
  test "${HTTP_STATUS}" = 201 && return 1 # 201 when no game running
  test "${HTTP_STATUS}" = 200 && return 0 # 200 when game running
}

display_off() {
  if echo "${UI_SERVICE}" | grep "sway"; then
    ${DEBUG} && log $0 "Display power off"
    swaymsg "output * power off"
  elif echo "${UI_SERVICE}" | grep "weston"; then
    dpms-client -m off
  fi
}

display_on() {
  if echo "${UI_SERVICE}" | grep "sway"; then
    ${DEBUG} && log $0 "Display power on"
    swaymsg "output * power on"
  elif echo "${UI_SERVICE}" | grep "weston"; then
    dpms-client -m on
  fi
}

mute_audio() {
  ${DEBUG} && log $0 "Mute audio"
  pactl set-sink-mute @DEFAULT_SINK@ true
}

unmute_audio() {
  ${DEBUG} && log $0 "Unmute audio"
  pactl set-sink-mute @DEFAULT_SINK@ false
}

park_cores() {
  ${DEBUG} && log $0 "CPU core parking"
  for x in /sys/devices/system/cpu/cpu*/online; do
    if [[ ! $(echo "${x}" | grep "cpu0") ]]; then
      echo 0 > "${x}"
    fi
  done
}

unpark_cores() {
  ${DEBUG} && log $0 "Undo CPU core parking"
  for x in /sys/devices/system/cpu/cpu*/online; do
    echo 1 > "${x}"
  done
}

block_input() {
  for x in /dev/input/event*; do
    EVENT_INPUT=$(echo ${x} | awk 'BEGIN{FS="/"} {print $NF}')
    DEVICE_NAME=$(cat /sys/class/input/$EVENT_INPUT/device/name)

    # If device is not in whitelist, block input
    local FOUND=0
    for WHITELIST_DEVICE in "${INPUT_WHITELIST[@]}"; do
      if [[ "${WHITELIST_DEVICE}" = "${DEVICE_NAME}" ]]; then
        FOUND=1
        break
      fi
    done

    if (( ! ${FOUND})); then
      ${DEBUG} && log $0 "Blocking input for ${x} - ${DEVICE_NAME}"
      /usr/bin/evtest --grab ${x} > /dev/null &
    fi
  done
}

unblock_input() {
  ${DEBUG} && log $0 "Unblocking input"
  for x in $(pgrep -f "evtest --grab"); do
    kill -9 ${x}
  done
}

do_suspend_actions() {
  # Turn off display
  display_off

  # Mute audio
  mute_audio

  # CPU core parking
  park_cores

  # Block input
  block_input
}

do_resume_actions() {
  # Turn on display
  display_on

  # Unmute audio
  unmute_audio

  # Undo CPU core parking
  unpark_cores

  # Unblock input
  unblock_input
}

do_shutdown() {
  # Unmute audio - otherwise wireplumber will keep it muted on next boot
  unmute_audio

  # Check whether a game is running
  check_es_running_game
  RUNNING_GAME=$?

  if [[ $RUNNING_GAME -eq 0 ]]; then
    # ES shutdown API won't work if a game is running
    ${DEBUG} && log $0 "Shutting down now"
    shutdown now
  else
    # Use ES shutdown API so metadata is saved
    ${DEBUG} && log $0 "Shutting down via ES API"
    curl "http://localhost:1234/shutdown"
  fi
}

suspend() {
  # Suspend event - create delay flag file
  ${DEBUG} && log $0 "Creating ${DELAY_FLAG_FILE}"
  touch "${DELAY_FLAG_FILE}"

  # Wait for the desired shutdown delay
  check_es_running_game
  RUNNING_GAME=$?

  if [[ $RUNNING_GAME -eq 0 ]]; then
    DELAY=${SHUTDOWN_DELAY_RUNNING_GAME}
    ${DEBUG} && log $0 "Game running"
  else
    ${DEBUG} && log $0 "No game running"
    DELAY=${SHUTDOWN_DELAY}
  fi

  # Actions on suspend, only if there is a timed delay
  if [[ "${DELAY}" -gt 0 ]]; then
    ${DEBUG} && log $0 "Shutdown delay - ${DELAY} seconds"
    do_suspend_actions
  fi

  sleep ${DELAY}

  # Delay has completed - check whether the flag file is still present
  if [[ -f "${DELAY_FLAG_FILE}" ]]; then
    ${DEBUG} && log $0 "Delay expired, flag file found, shutting down"
    # Do shutdown
    do_shutdown
  else
    ${DEBUG} && log $0 "Delay expired, flag file not found"
  fi
}

resume() {
  # Resume event - remove all flag files and kill processes
  ${DEBUG} && log $0 "Removing flags"
  rm -f "${DELAY_FLAG_FILE_PATTERN}".*
  rm -f "${POWER_SUSPEND_ACTIVE_FLAG_FILE}"
  rm -f "${LID_CLOSED_FLAG_FILE}"

  # Do resume actions
  do_resume_actions

  ${DEBUG} && log $0 "Resume - killing ${TO_KILL} processes"
  killall ${TO_KILL}
}

# Main logic
if [[ "${SOURCE}" = "power" ]]; then
  ${DEBUG} && log $0 "Power button pressed ..."

  if [[ -f "${LID_CLOSED_FLAG_FILE}" ]]; then
    ${DEBUG} && log $0 "Lid closed - no action"
  elif [[ -f "${POWER_SUSPEND_ACTIVE_FLAG_FILE}" ]]; then
    # In a 'suspend' state from power button, 'resume'
    ${DEBUG} && log $0 "Power suspend active - resuming"
    resume
  else
    # Create flag file and suspend
    ${DEBUG} && log $0 "Suspending"
    touch ${POWER_SUSPEND_ACTIVE_FLAG_FILE}
    suspend
  fi
elif [[ "${SOURCE}" = "lid" && "${ACTION}" = "close" ]]; then
  ${DEBUG} && log $0 "Lid closed ..."
  touch ${LID_CLOSED_FLAG_FILE}

  if [[ -f "${POWER_SUSPEND_ACTIVE_FLAG_FILE}" ]]; then
    # In a 'suspend' state from power button, do nothing
    ${DEBUG} && log $0 "Power suspend active - no action"
  else
    # Suspend
    ${DEBUG} && log $0 "Suspending"
    suspend
  fi
elif [[ "${SOURCE}" = "lid" && "${ACTION}" = "open" ]]; then
  # Always resume on lid open - regardless of suspend source
  ${DEBUG} && log $0 "Lid opened - resuming"
  resume
fi

exit 0