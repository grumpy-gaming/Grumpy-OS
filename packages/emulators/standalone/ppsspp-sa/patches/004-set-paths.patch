diff --git a/Core/Config.cpp b/Core/Config.cpp
index 6b8c868d1..2d81b2376 100644
--- a/Core/Config.cpp
+++ b/Core/Config.cpp
@@ -1151,7 +1151,7 @@ void Config::UpdateIniLocation(const char *iniFileName, const char *controllerIn
 	const bool useIniFilename = iniFileName != nullptr && strlen(iniFileName) > 0;
 	const char *ppssppIniFilename = IsVREnabled() ? "ppssppvr.ini" : "ppsspp.ini";
 	bool exists;
-	iniFilename_ = FindConfigFile(useIniFilename ? iniFileName : ppssppIniFilename, &exists);
+	iniFilename_ = Path("/storage/.config/ppsspp/PSP/SYSTEM") / ppssppIniFilename;
 	const bool useControllerIniFilename = controllerIniFilename != nullptr && strlen(controllerIniFilename) > 0;
 	const char *controlsIniFilename = IsVREnabled() ? "controlsvr.ini" : "controls.ini";
 	controllerIniFilename_ = FindConfigFile(useControllerIniFilename ? controllerIniFilename : controlsIniFilename, &exists);
diff --git a/Core/SaveState.cpp b/Core/SaveState.cpp
index f70098d4d..c9b5a13ca 100644
--- a/Core/SaveState.cpp
+++ b/Core/SaveState.cpp
@@ -542,7 +542,7 @@ double g_lastSaveTime = -1.0;
 
 	Path GenerateSaveSlotFilename(const Path &gameFilename, int slot, const char *extension)
 	{
-		std::string filename = StringFromFormat("%s_%d.%s", GenerateFullDiscId(gameFilename).c_str(), slot, extension);
+		std::string filename = StringFromFormat("%s_%d.%s", gameFilename.WithReplacedExtension("").GetFilename().c_str(), slot, extension);
 		return GetSysDirectory(DIRECTORY_SAVESTATE) / filename;
 	}
 
diff --git a/Core/System.cpp b/Core/System.cpp
index fdc439e38..8d0923788 100644
--- a/Core/System.cpp
+++ b/Core/System.cpp
@@ -766,14 +766,8 @@ void PSP_RunLoopFor(int cycles) {
 }
 
 Path GetSysDirectory(PSPDirectories directoryType) {
-	const Path &memStickDirectory = g_Config.memStickDirectory;
-	Path pspDirectory;
-	if (!strcasecmp(memStickDirectory.GetFilename().c_str(), "PSP")) {
-		// Let's strip this off, to easily allow choosing a root directory named "PSP" on Android.
-		pspDirectory = memStickDirectory;
-	} else {
-		pspDirectory = memStickDirectory / "PSP";
-	}
+	Path memStickDirectory = Path("/storage/roms/psp/");
+ 	Path pspDirectory = Path("/storage/.config/ppsspp/PSP/");
 
 	switch (directoryType) {
 	case DIRECTORY_PSP:
@@ -783,9 +777,9 @@ Path GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_GAME:
 		return pspDirectory / "GAME";
 	case DIRECTORY_SAVEDATA:
-		return pspDirectory / "SAVEDATA";
+		return Path("/storage/roms/psp/");
 	case DIRECTORY_SCREENSHOT:
-		return pspDirectory / "SCREENSHOT";
+		return Path("/storage/roms/screenshots/");
 	case DIRECTORY_SYSTEM:
 		return pspDirectory / "SYSTEM";
 	case DIRECTORY_PAUTH:
@@ -795,7 +789,7 @@ Path GetSysDirectory(PSPDirectories directoryType) {
 	case DIRECTORY_DUMP:
 		return pspDirectory / "SYSTEM/DUMP";
 	case DIRECTORY_SAVESTATE:
-		return pspDirectory / "PPSSPP_STATE";
+		return Path("/storage/roms/savestates/psp/ppsspp-sa");
 	case DIRECTORY_CACHE:
 		return pspDirectory / "SYSTEM/CACHE";
 	case DIRECTORY_TEXTURES:
@@ -817,11 +811,11 @@ Path GetSysDirectory(PSPDirectories directoryType) {
 		return pspDirectory / "themes";
 
 	case DIRECTORY_MEMSTICK_ROOT:
-		return g_Config.memStickDirectory;
+		return memStickDirectory;
 	// Just return the memory stick root if we run into some sort of problem.
 	default:
 		ERROR_LOG(Log::FileSystem, "Unknown directory type.");
-		return g_Config.memStickDirectory;
+		return pspDirectory;
 	}
 }
 
diff --git a/SDL/SDLJoystick.cpp b/SDL/SDLJoystick.cpp
index 94a6f481b..2ab655f14 100644
--- a/SDL/SDLJoystick.cpp
+++ b/SDL/SDLJoystick.cpp
@@ -24,7 +24,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		SDL_Init(SDL_INIT_JOYSTICK | SDL_INIT_VIDEO | SDL_INIT_GAMECONTROLLER);
 	}
 
-	const char *dbPath = "gamecontrollerdb.txt";
+	const char *dbPath = "/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt";
 	INFO_LOG(Log::System, "loading control pad mappings from %s:", dbPath);
 
 	size_t size;
@@ -33,7 +33,7 @@ SDLJoystick::SDLJoystick(bool init_SDL ) : registeredAsEventHandler(false) {
 		SDL_RWops *rw = SDL_RWFromConstMem(mappingData, size);
 		// 1 to free the rw after use
 		if (SDL_GameControllerAddMappingsFromRW(rw, 1) == -1) {
-			ERROR_LOG(Log::System, "Failed to read mapping data - corrupt?");
+			ERROR_LOG(Log::System, "/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt missing");
 		}
 		delete[] mappingData;
 	} else {
diff --git a/UI/NativeApp.cpp b/UI/NativeApp.cpp
index e99cfc4ca..2a8aa85ec 100644
--- a/UI/NativeApp.cpp
+++ b/UI/NativeApp.cpp
@@ -385,7 +385,7 @@ void NativeInit(int argc, const char *argv[], const char *savegame_dir, const ch
 #if !defined(MOBILE_DEVICE) && !defined(_WIN32) && !PPSSPP_PLATFORM(SWITCH)
 	g_VFS.Register("", new DirectoryReader(File::GetExeDirectory() / "assets"));
 	g_VFS.Register("", new DirectoryReader(File::GetExeDirectory()));
-	g_VFS.Register("", new DirectoryReader(Path("/usr/local/share/ppsspp/assets")));
+	g_VFS.Register("", new DirectoryReader(Path("/storage/.config/ppsspp/assets")));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/local/share/games/ppsspp/assets")));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/share/ppsspp/assets")));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/share/games/ppsspp/assets")));
@@ -492,7 +492,7 @@ void NativeInit(int argc, const char *argv[], const char *savegame_dir, const ch
 	else // Just in case
 		config = "./config";
 
-	g_Config.memStickDirectory = Path(config) / "ppsspp";
+	g_Config.memStickDirectory = Path("/storage/roms/psp/");
 	g_Config.flash0Directory = File::GetExeDirectory() / "assets/flash0";
 	if (getenv("HOME") != nullptr) {
 		g_Config.defaultCurrentDirectory = Path(getenv("HOME"));
