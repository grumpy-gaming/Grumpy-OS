--- a/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
+++ b/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
@@ -5748,7 +5748,7 @@
 	struct kbase_device *kbdev = to_kbase_device(&pdev->dev);
 
 	if (!kbdev)
-		return -ENODEV;
+		return;
 
 	kbase_device_term(kbdev);
 	dev_set_drvdata(kbdev->dev, NULL);
--- a/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
+++ b/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
@@ -5743,7 +5743,7 @@
 	put_device(kbdev->dev);
 }
 
-static int kbase_platform_device_remove(struct platform_device *pdev)
+static void kbase_platform_device_remove(struct platform_device *pdev)
 {
 	struct kbase_device *kbdev = to_kbase_device(&pdev->dev);
 
@@ -5753,8 +5753,6 @@
 	kbase_device_term(kbdev);
 	dev_set_drvdata(kbdev->dev, NULL);
 	kbase_device_free(kbdev);
-
-	return 0;
 }
 
 void kbase_backend_devfreq_term(struct kbase_device *kbdev)
--- a/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c
+++ b/product/kernel/drivers/gpu/arm/midgard/device/mali_kbase_device.c
@@ -305,12 +305,13 @@
 	if (err)
 		goto dma_set_mask_failed;
 
-
+#if 0
 	/* There is no limit for Mali, so set to max. */
 	if (kbdev->dev->dma_parms)
 		err = dma_set_max_seg_size(kbdev->dev, UINT_MAX);
 	if (err)
 		goto dma_set_mask_failed;
+#endif
 
 	kbdev->nr_hw_address_spaces = (s8)kbdev->gpu_props.num_address_spaces;
 
--- a/product/kernel/drivers/gpu/arm/midgard/mali_kbase_kinstr_jm.c
+++ b/product/kernel/drivers/gpu/arm/midgard/mali_kbase_kinstr_jm.c
@@ -651,7 +651,9 @@
 
 /* The file operations virtual function table */
 static const struct file_operations file_operations = { .owner = THIS_MODULE,
+#if 0
 							.llseek = no_llseek,
+#endif
 							.read = reader_read,
 							.poll = reader_poll,
 							.release = reader_release };
--- a/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
+++ b/product/kernel/drivers/gpu/arm/midgard/mali_kbase_core_linux.c
@@ -774,7 +774,9 @@
 	}
 
 	filp->private_data = kfile;
+#if 0
 	filp->f_mode |= FMODE_UNSIGNED_OFFSET;
+#endif
 
 	return 0;
 
